using Testcontainers.RabbitMq;
using Xunit;

public class RabbitMqFixture : IAsyncLifetime
{
    public RabbitMqContainer RabbitMqContainer { get; private set; }

    public string ConnectionString => RabbitMqContainer.GetConnectionString();

    public async Task InitializeAsync()
    {
        RabbitMqContainer = new RabbitMqBuilder()
            .WithImage("rabbitmq:3.12-management")
            .WithName("rabbitmq-integration-test")
            .WithPortBinding(5672, true)
            .WithPortBinding(15672, true)
            .WithUsername("guest")
            .WithPassword("guest")
            .Build();

        await RabbitMqContainer.StartAsync();
    }

    public async Task DisposeAsync()
    {
        await RabbitMqContainer.DisposeAsync();
    }
}






;;;;;;

using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using RabbitMQ.Client;
using System.Text;
using System.Threading.Tasks;
using Xunit;

public class IntegrationTest : IClassFixture<RabbitMqFixture>
{
    private readonly RabbitMqFixture _fixture;

    public IntegrationTest(RabbitMqFixture fixture)
    {
        _fixture = fixture;
    }

    [Fact]
    public async Task TestWorkerConsumesMessageFromRabbitMq()
    {
        // Arrange: Cria configuração apontando para o container do RabbitMQ
        var config = new ConfigurationBuilder()
            .AddInMemoryCollection(new Dictionary<string, string>
            {
                ["RabbitMq:HostName"] = _fixture.RabbitMqContainer.Hostname,
                ["RabbitMq:Port"] = _fixture.RabbitMqContainer.GetMappedPublicPort(5672).ToString(),
                ["RabbitMq:UserName"] = "guest",
                ["RabbitMq:Password"] = "guest",
                ["RabbitMq:QueueName"] = "test-queue"
            })
            .Build();

        using var host = Host.CreateDefaultBuilder()
            .ConfigureAppConfiguration(builder => builder.AddConfiguration(config))
            .ConfigureServices((context, services) =>
            {
                // Adiciona o seu Worker como HostedService
                services.AddHostedService<SeuWorker>(); // Substitua pelo nome real do seu worker
            })
            .Build();

        await host.StartAsync();

        // Act: Publica uma mensagem na fila
        var factory = new ConnectionFactory()
        {
            HostName = _fixture.RabbitMqContainer.Hostname,
            Port = _fixture.RabbitMqContainer.GetMappedPublicPort(5672),
            UserName = "guest",
            Password = "guest"
        };

        using var connection = factory.CreateConnection();
        using var channel = connection.CreateModel();

        channel.QueueDeclare(queue: "test-queue",
                             durable: false,
                             exclusive: false,
                             autoDelete: false,
                             arguments: null);

        string message = "Hello, Worker!";
        var body = Encoding.UTF8.GetBytes(message);

        channel.BasicPublish(exchange: "",
                             routingKey: "test-queue",
                             basicProperties: null,
                             body: body);

        // Assert: Espera um tempo para o worker processar a mensagem
        await Task.Delay(3000); // Ajuste conforme necessário

        // Aqui você pode adicionar validações extras, por exemplo:
        // - Verificar no banco se a mensagem foi processada
        // - Verificar se algum log foi gerado
        // - Etc.

        await host.StopAsync();
    }
}

