using System.Text;
using System.Threading.Channels;
using DotNet.Testcontainers.Builders;
using DotNet.Testcontainers.Containers;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using RabbitMQ.Client;
using Xunit;

public class RabbitMqWorkerIntegrationTest : IAsyncLifetime
{
    private IContainer _rabbitMqContainer;
    private IHost _workerHost;

    private string _rabbitMqHost;
    private ushort _rabbitMqPort;
    private const string QueueName = "test-queue";

    public RabbitMqWorkerIntegrationTest()
    {
        _rabbitMqContainer = new ContainerBuilder()
            .WithImage("rabbitmq:3.13-management") // versão mais recente do RabbitMQ
            .WithName("rabbitmq-integration-test")
            .WithPortBinding(5672, assignRandomHostPort: true)
            .WithPortBinding(15672, assignRandomHostPort: true)
            .WithWaitStrategy(Wait.ForUnixContainer().UntilPortIsAvailable(5672))
            .Build();
    }

    public async Task InitializeAsync()
    {
        await _rabbitMqContainer.StartAsync();

        _rabbitMqHost = _rabbitMqContainer.Hostname;
        _rabbitMqPort = (ushort)_rabbitMqContainer.GetMappedPublicPort(5672);

        var config = new ConfigurationBuilder()
            .AddInMemoryCollection(new Dictionary<string, string>
            {
                { "RabbitMq:Host", _rabbitMqHost },
                { "RabbitMq:Port", _rabbitMqPort.ToString() },
                { "RabbitMq:QueueName", QueueName }
            })
            .Build();

        _workerHost = Program.CreateHostBuilder(Array.Empty<string>())
            .ConfigureAppConfiguration(builder => builder.AddConfiguration(config))
            .Build();

        await _workerHost.StartAsync();

        // Esperar RabbitMQ estar pronto
        await WaitForRabbitMqToBeAvailable();
    }

    [Fact]
    public async Task Worker_Deve_Consumir_Mensagem_Do_RabbitMq()
    {
        var factory = new ConnectionFactory
        {
            HostName = _rabbitMqHost,
            Port = _rabbitMqPort
        };

        using var connection = factory.CreateConnection();
        using var channel = connection.CreateModel();

        DeclareTestQueue(channel);

        var message = "Hello Worker!";
        var body = Encoding.UTF8.GetBytes(message);

        channel.BasicPublish(exchange: "",
                             routingKey: QueueName,
                             basicProperties: null,
                             body: body);

        var consumiu = await WaitForQueueToBeEmpty(channel, QueueName, TimeSpan.FromSeconds(10));

        Assert.True(consumiu, "A fila não foi consumida pelo Worker dentro do tempo esperado.");
    }

    private void DeclareTestQueue(IModel channel)
    {
        channel.QueueDeclare(queue: QueueName,
                             durable: false,
                             exclusive: false,
                             autoDelete: false,
                             arguments: null);
    }

    private async Task<bool> WaitForQueueToBeEmpty(IModel channel, string queueName, TimeSpan timeout)
    {
        var timeoutAt = DateTime.UtcNow + timeout;

        while (DateTime.UtcNow < timeoutAt)
        {
            try
            {
                var result = channel.QueueDeclarePassive(queueName);
                if (result.MessageCount == 0)
                {
                    return true;
                }
            }
            catch
            {
                // Fila ainda não criada
            }

            await Task.Delay(200);
        }

        return false;
    }

    private async Task WaitForRabbitMqToBeAvailable()
    {
        var factory = new ConnectionFactory
        {
            HostName = _rabbitMqHost,
            Port = _rabbitMqPort
        };

        var timeout = DateTime.UtcNow.AddSeconds(10);
        while (DateTime.UtcNow < timeout)
        {
            try
            {
                using var connection = factory.CreateConnection();
                if (connection.IsOpen)
                {
                    return;
                }
            }
            catch
            {
                // RabbitMQ não está pronto ainda
            }

            await Task.Delay(500);
        }

        throw new Exception("Timeout ao esperar o RabbitMQ ficar disponível.");
    }

    public async Task DisposeAsync()
    {
        if (_workerHost != null)
        {
            await _workerHost.StopAsync();
            _workerHost.Dispose();
        }

        if (_rabbitMqContainer != null)
        {
            await _rabbitMqContainer.StopAsync();
            await _rabbitMqContainer.DisposeAsync();
        }
    }
}
