using System;
using System.Text;
using System.Threading.Tasks;
using DotNet.Testcontainers.Builders;
using DotNet.Testcontainers.Containers;
using RabbitMQ.Client;
using RabbitMQ.Client.Exceptions;
using Microsoft.Extensions.Hosting;
using Xunit;
using System.Threading;

public class RabbitMqWorkerIntegrationTest : IAsyncLifetime
{
    private readonly IContainer _rabbitMqContainer;
    private IHost _workerHost;

    private string _rabbitMqHost;
    private int _rabbitMqPort;

    public RabbitMqWorkerIntegrationTest()
    {
        _rabbitMqContainer = new TestcontainersBuilder<TestcontainersContainer>()
            .WithImage("rabbitmq:3.8-management")
            .WithName("test-rabbitmq")
            .WithPortBinding(5672, true)
            .WithPortBinding(15672, true) // management
            .WithWaitStrategy(Wait.ForUnixContainer().UntilPortIsAvailable(5672))
            .Build();
    }

    public async Task InitializeAsync()
    {
        await _rabbitMqContainer.StartAsync();

        _rabbitMqHost = _rabbitMqContainer.Hostname;
        _rabbitMqPort = _rabbitMqContainer.GetMappedPublicPort(5672);

        // Aqui starta sua aplicação Worker apontando para o RabbitMQ do container
        _workerHost = Program.CreateHostBuilder(new string[] {
            $"--RabbitMqHost={_rabbitMqHost}",
            $"--RabbitMqPort={_rabbitMqPort}",
            $"--QueueName=test-queue"
        }).Build();

        _ = _workerHost.StartAsync();
    }

    [Fact]
    public async Task Worker_Deve_Consumir_Mensagem_Do_RabbitMq()
    {
        var factory = new ConnectionFactory()
        {
            HostName = _rabbitMqHost,
            Port = _rabbitMqPort
        };

        using var connection = factory.CreateConnection();
        using var channel = connection.CreateModel();

        channel.QueueDeclare(queue: "test-queue",
                             durable: false,
                             exclusive: false,
                             autoDelete: false,
                             arguments: null);

        var message = "Hello Worker!";
        var body = Encoding.UTF8.GetBytes(message);

        channel.BasicPublish(exchange: "",
                             routingKey: "test-queue",
                             basicProperties: null,
                             body: body);

        // Aguarda até que a fila esteja vazia ou atinja timeout
        bool consumiu = await WaitForQueueToBeEmpty(channel, "test-queue", TimeSpan.FromSeconds(5));

        Assert.True(consumiu, "A fila não foi consumida pelo Worker dentro do tempo esperado.");
    }

    private async Task<bool> WaitForQueueToBeEmpty(IModel channel, string queueName, TimeSpan timeout)
    {
        var timeoutAt = DateTime.UtcNow + timeout;

        while (DateTime.UtcNow < timeoutAt)
        {
            var result = channel.QueueDeclarePassive(queueName);
            if (result.MessageCount == 0)
            {
                return true;
            }

            await Task.Delay(200); // pequena pausa antes de checar novamente
        }

        return false;
    }

    public async Task DisposeAsync()
    {
        await _workerHost.StopAsync();
        await _rabbitMqContainer.StopAsync();
    }
}
