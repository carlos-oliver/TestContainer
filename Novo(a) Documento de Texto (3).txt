using System;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using RabbitMQ.Client;
using Testcontainers.RabbitMq;
using Xunit;

public class RabbitMqWorkerIntegrationTest : IAsyncLifetime
{
    private IHost _workerHost;
    private RabbitMqContainer _rabbitMqContainer;

    private string _rabbitMqHost;
    private int _rabbitMqPort;
    private const string QueueName = "test-queue";

    public RabbitMqWorkerIntegrationTest()
    {
        _rabbitMqContainer = new RabbitMqBuilder()
            .WithImage("rabbitmq:3.12-management")
            .WithPortBinding(5672, true)
            .WithPortBinding(15672, true)
            .WithWaitStrategy(Wait.ForUnixContainer().UntilPortIsAvailable(5672))
            .Build();
    }

    public async Task InitializeAsync()
    {
        await _rabbitMqContainer.StartAsync();

        _rabbitMqHost = _rabbitMqContainer.Hostname;
        _rabbitMqPort = _rabbitMqContainer.GetMappedPublicPort(5672);

        _workerHost = Program.CreateHostBuilder(Array.Empty<string>())
            .ConfigureAppConfiguration((context, configBuilder) =>
            {
                var testConfig = new ConfigurationBuilder()
                    .AddInMemoryCollection(new[]
                    {
                        new KeyValuePair<string, string>("RabbitMq:Host", _rabbitMqHost),
                        new KeyValuePair<string, string>("RabbitMq:Port", _rabbitMqPort.ToString()),
                        new KeyValuePair<string, string>("RabbitMq:QueueName", QueueName),
                    })
                    .Build();

                configBuilder.AddConfiguration(testConfig);
            })
            .Build();

        await _workerHost.StartAsync();
    }

    [Fact]
    public async Task Worker_Deve_Consumir_Mensagem_Do_RabbitMq()
    {
        var factory = new ConnectionFactory
        {
            HostName = _rabbitMqHost,
            Port = _rabbitMqPort
        };

        using var connection = factory.CreateConnection();
        using var channel = connection.CreateModel();

        DeclareTestQueue(channel);

        var message = "Hello Worker!";
        var body = Encoding.UTF8.GetBytes(message);

        channel.BasicPublish(exchange: "",
                             routingKey: QueueName,
                             basicProperties: null,
                             body: body);

        var consumiu = await WaitForQueueToBeEmpty(channel, QueueName, TimeSpan.FromSeconds(15));

        Assert.True(consumiu, "A fila não foi consumida pelo Worker dentro do tempo esperado.");
    }

    private void DeclareTestQueue(IModel channel)
    {
        channel.QueueDeclare(queue: QueueName,
                             durable: false,
                             exclusive: false,
                             autoDelete: false,
                             arguments: null);
    }

    private async Task<bool> WaitForQueueToBeEmpty(IModel channel, string queueName, TimeSpan timeout)
    {
        var timeoutAt = DateTime.UtcNow + timeout;

        while (DateTime.UtcNow < timeoutAt)
        {
            try
            {
                var result = channel.QueueDeclarePassive(queueName);
                if (result.MessageCount == 0)
                {
                    return true;
                }
            }
            catch
            {
                // Ignora, a fila ainda pode não estar criada
            }

            await Task.Delay(500);
        }

        return false;
    }

    public async Task DisposeAsync()
    {
        if (_workerHost != null)
        {
            await _workerHost.StopAsync();
            _workerHost.Dispose();
        }

        if (_rabbitMqContainer != null)
        {
            await _rabbitMqContainer.StopAsync();
            _rabbitMqContainer.Dispose();
        }
    }
}



private static void RemoverServicosKafka(IServiceCollection services)
{
    var kafkaKeywords = new[] { "Kafka", "Confluent", "Producer", "Consumer" };

    var servicosKafka = services
        .Where(s =>
            kafkaKeywords.Any(k =>
                s.ServiceType?.FullName?.Contains(k) == true ||
                s.ImplementationType?.FullName?.Contains(k) == true ||
                s.ImplementationInstance?.GetType().FullName?.Contains(k) == true ||
                s.ImplementationFactory?.Method.ReturnType.FullName?.Contains(k) == true
            ))
        .ToList();

    foreach (var svc in servicosKafka)
    {
        services.Remove(svc);
        Console.WriteLine($"[Removido] {svc.ServiceType?.FullName}");
    }
}
