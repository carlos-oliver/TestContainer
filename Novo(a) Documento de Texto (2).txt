using System.Threading.Tasks;
using Testcontainers.MsSql;

public class TestDatabaseContainer
{
    private readonly MsSqlContainer _sqlContainer;

    public TestDatabaseContainer()
    {
        _sqlContainer = new MsSqlBuilder()
            .WithImage("mcr.microsoft.com/mssql/server:2019-latest")
            .WithPassword("YourStrong(!)Password")
            .Build();
    }

    public async Task StartAsync() => await _sqlContainer.StartAsync();
    public async Task StopAsync() => await _sqlContainer.DisposeAsync();
    public string GetConnectionString() => _sqlContainer.GetConnectionString();
}

........................
using System.Data.SqlClient;
using System.Threading.Tasks;

public static class TestDatabaseInitializer
{
    public static async Task InitializeDatabase(string connectionString)
    {
        using var connection = new SqlConnection(connectionString);
        await connection.OpenAsync();

        var command = connection.CreateCommand();
        command.CommandText = @"
            CREATE TABLE Usuarios (
                Id INT PRIMARY KEY IDENTITY,
                Nome NVARCHAR(100) NOT NULL
            );

            INSERT INTO Usuarios (Nome) VALUES ('João'), ('Maria');";
        await command.ExecuteNonQueryAsync();
    }
}

..........................
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.Extensions.Configuration;

public class CustomWebApplicationFactory<TStartup> : WebApplicationFactory<TStartup> where TStartup : class
{
    private readonly string _connectionString;

    public CustomWebApplicationFactory(string connectionString)
    {
        _connectionString = connectionString;
    }

    protected override void ConfigureWebHost(IWebHostBuilder builder)
    {
        builder.ConfigureAppConfiguration((context, config) =>
        {
            var memoryConfig = new Dictionary<string, string?>
            {
                { "ConnectionStrings:DefaultConnection", _connectionString }
            };
            config.AddInMemoryCollection(memoryConfig);
        });
    }
}
......................
using System.Net.Http;
using System.Threading.Tasks;
using Xunit;

public abstract class BaseIntegrationTest : IAsyncLifetime
{
    protected readonly TestDatabaseContainer DatabaseContainer;
    protected HttpClient Client;
    private CustomWebApplicationFactory<Program> _factory;

    protected BaseIntegrationTest()
    {
        DatabaseContainer = new TestDatabaseContainer();
    }

    public async Task InitializeAsync()
    {
        await DatabaseContainer.StartAsync();
        string connectionString = DatabaseContainer.GetConnectionString();

        _factory = new CustomWebApplicationFactory<Program>(connectionString);
        Client = _factory.CreateClient();

        await TestDatabaseInitializer.InitializeDatabase(connectionString);
    }

    public async Task DisposeAsync()
    {
        await DatabaseContainer.StopAsync();
    }
}
........................
using System.Threading.Tasks;
using Xunit;

public class ApiIntegrationTests : BaseIntegrationTest
{
    [Fact]
    public async Task Deve_Retornar_Usuarios_Do_Banco()
    {
        var response = await Client.GetAsync("/api/usuarios");
        response.EnsureSuccessStatusCode();
        
        var content = await response.Content.ReadAsStringAsync();
        Assert.Contains("João", content);
        Assert.Contains("Maria", content);
    }
}
