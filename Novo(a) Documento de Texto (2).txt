using System;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Configuration;
using Microsoft.AspNetCore.Mvc.Testing;
using Testcontainers.MsSql;
using Xunit;
using Microsoft.EntityFrameworkCore;

public class ApiIntegrationTests : IAsyncLifetime
{
    private readonly MsSqlContainer _sqlContainer;
    private readonly WebApplicationFactory<Program> _factory;
    private readonly HttpClient _client;

    public ApiIntegrationTests()
    {
        _sqlContainer = new MsSqlBuilder()
            .WithImage("mcr.microsoft.com/mssql/server:2019-latest")
            .WithPassword("YourStrong(!)Password")
            .Build();
    }

    public async Task InitializeAsync()
    {
        await _sqlContainer.StartAsync();
        
        _factory = new WebApplicationFactory<Program>()
            .WithWebHostBuilder(builder =>
            {
                builder.ConfigureAppConfiguration((context, config) =>
                {
                    var connectionString = _sqlContainer.GetConnectionString();
                    var memoryConfig = new Dictionary<string, string?>
                    {
                        { "ConnectionStrings:DefaultConnection", connectionString }
                    };
                    config.AddInMemoryCollection(memoryConfig);
                });

                builder.ConfigureServices(services =>
                {
                    // Remover contexto existente
                    var descriptor = services.SingleOrDefault(d => d.ServiceType == typeof(DbContextOptions<AppDbContext>));
                    if (descriptor != null)
                        services.Remove(descriptor);

                    // Registrar novo contexto apontando para o banco do container
                    services.AddDbContext<AppDbContext>(options =>
                        options.UseSqlServer(_sqlContainer.GetConnectionString()));
                });
            });

        _client = _factory.CreateClient();

        await InitializeDatabase();
    }

    private async Task InitializeDatabase()
    {
        using var connection = new SqlConnection(_sqlContainer.GetConnectionString());
        await connection.OpenAsync();

        var command = connection.CreateCommand();
        command.CommandText = @"
            CREATE TABLE Usuarios (
                Id INT PRIMARY KEY IDENTITY,
                Nome NVARCHAR(100) NOT NULL
            );

            INSERT INTO Usuarios (Nome) VALUES ('João'), ('Maria');";
        await command.ExecuteNonQueryAsync();
    }

    public async Task DisposeAsync()
    {
        await _sqlContainer.StopAsync();
    }

    [Fact]
    public async Task Deve_Retornar_Usuarios_Do_Banco()
    {
        var response = await _client.GetAsync("/api/usuarios");
        response.EnsureSuccessStatusCode();
        
        var content = await response.Content.ReadAsStringAsync();
        Assert.Contains("João", content);
        Assert.Contains("Maria", content);
    }
}
